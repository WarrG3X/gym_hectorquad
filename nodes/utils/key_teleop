#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 PAL Robotics SL.
# Released under the BSD License.
#
# Authors:
#   * Siegfried-A. Gevatter

import curses
import math
import os
import subprocess

import rospy
from geometry_msgs.msg import Twist
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import Empty
import tf.transformations as tft

class Velocity(object):

    def __init__(self, min_velocity, max_velocity, num_steps):
        assert min_velocity > 0 and max_velocity > 0 and num_steps > 0
        self._min = min_velocity
        self._max = max_velocity
        self._num_steps = num_steps
        if self._num_steps > 1:
            self._step_incr = (max_velocity - min_velocity) / (self._num_steps - 1)
        else:
            # If num_steps is one, we always use the minimum velocity.
            self._step_incr = 0

    def __call__(self, value, step):
        """
        Takes a value in the range [0, 1] and the step and returns the
        velocity (usually m/s or rad/s).
        """
        if step == 0:
            return 0

        assert step > 0 and step <= self._num_steps
        max_value = self._min + self._step_incr * (step - 1)
        return value * max_value

class TextWindow():

    _screen = None
    _window = None
    _num_lines = None

    def __init__(self, stdscr, lines=10):
        self._screen = stdscr
        self._screen.nodelay(True)
        curses.curs_set(0)

        self._num_lines = lines

    def read_key(self):
        keycode = self._screen.getch()
        return keycode if keycode != -1 else None

    def clear(self):
        self._screen.clear()

    def write_line(self, lineno, message):
        if lineno < 0 or lineno >= self._num_lines:
            raise ValueError('lineno out of bounds')
        height, width = self._screen.getmaxyx()
        y = (height // self._num_lines) * lineno
        x = 10
        for text in message.split('\n'):
            text = text.ljust(width)
            self._screen.addstr(y, x, text)
            y += 1

    def refresh(self):
        self._screen.refresh()

    def beep(self):
        curses.flash()

class KeyTeleop():

    _interface = None

    _linear = None
    _angular = None

    def __init__(self, interface):
        self._interface = interface
        self._pub_cmd = rospy.Publisher('cmd_vel', Twist)

        self._hz = rospy.get_param('~hz', 20)

        self._num_steps = rospy.get_param('~turbo/steps', 4)

        forward_min = rospy.get_param('~turbo/linear_forward_min', 0.5)
        forward_max = rospy.get_param('~turbo/linear_forward_max', 1.0)
        self._forward = Velocity(forward_min, forward_max, self._num_steps)

        backward_min = rospy.get_param('~turbo/linear_backward_min', 0.25)
        backward_max = rospy.get_param('~turbo/linear_backward_max', 0.5)
        self._backward = Velocity(backward_min, backward_max, self._num_steps)

        angular_min = rospy.get_param('~turbo/angular_min', 0.7)
        angular_max = rospy.get_param('~turbo/angular_max', 1.2)
        self._rotation = Velocity(angular_min, angular_max, self._num_steps)

    def run(self):
        self._linear = 0
        self._angular = 0

        rate = rospy.Rate(self._hz)
        while True:
            keycode = self._interface.read_key()
            if keycode:
                if self._key_pressed(keycode):
                    self._publish()
            else:
                self._publish()
                rate.sleep()

    def _get_twist(self, linear, angular):
        twist = Twist()
        if linear >= 0:
            twist.linear.x = self._forward(1.0, linear)
        else:
            twist.linear.x = self._backward(-1.0, -linear)
        twist.angular.z = self._rotation(math.copysign(1, angular), abs(angular))
        return twist

    def _key_pressed(self, keycode):
        movement_bindings = {
            curses.KEY_UP:    ( 1,  0),
            curses.KEY_DOWN:  (-1,  0),
            curses.KEY_LEFT:  ( 0,  1),
            curses.KEY_RIGHT: ( 0, -1),
        }
        speed_bindings = {
            ord(' '): (0, 0),
        }
        if keycode in movement_bindings:
            acc = movement_bindings[keycode]
            ok = False
            if acc[0]:
                linear = self._linear + acc[0]
                if abs(linear) <= self._num_steps:
                    self._linear = linear
                    ok = True
            if acc[1]:
                angular = self._angular + acc[1]
                if abs(angular) <= self._num_steps:
                    self._angular = angular
                    ok = True
            if not ok:
                self._interface.beep()
        elif keycode in speed_bindings:
            acc = speed_bindings[keycode]
            # Note: bounds aren't enforced here!
            if acc[0] is not None:
                self._linear = acc[0]
            if acc[1] is not None:
                self._angular = acc[1]

        elif keycode == ord('q'):
            rospy.signal_shutdown('Bye')
        else:
            return False

        return True

    def _publish(self):
        self._interface.clear()
        self._interface.write_line(2, 'Linear X: %d, Angular: %d' % (self._linear, self._angular))
        self._interface.write_line(5, 'Use arrow keys to move, space to stop, q to exit.')
        self._interface.refresh()

        twist = self._get_twist(self._linear, self._angular)
        self._pub_cmd.publish(twist)

height = 0
attitude = 0
def data_callback(data):
    global height,attitude
    height = data.pose.position.z
    attitude = tft.euler_from_quaternion([data.pose.orientation.w,data.pose.orientation.x,data.pose.orientation.y,data.pose.orientation.z])[0]
    attitude = -math.degrees(attitude)
    attitude += +180

class SimpleKeyTeleop():
    def __init__(self, interface):
        self._interface = interface
        self._namespace = ''
        self._pub_cmd = rospy.Publisher(self._namespace+'/cmd_vel', Twist)
        self._takeoff_cmd = rospy.Publisher(self._namespace+'/takeoff', Empty)
        self._land_cmd = rospy.Publisher(self._namespace+'/land', Empty)
        self._reset_cmd = rospy.Publisher(self._namespace+'/reset', Empty)
        self._flt_cmd = rospy.Publisher(self._namespace+'/flattrim', Empty)
        self._init_cmd = "parrot-gz model -m bebop_a -x 0 -y 0 -z 0.1 -R 0 -P 0 -Y 0"

        self._hz = rospy.get_param('~hz', 20)

        self._forward_rate = rospy.get_param('~forward_rate', 0.8)
        self._backward_rate = rospy.get_param('~backward_rate', 0.5)
        self._rotation_rate = rospy.get_param('~rotation_rate', 0.5)
        self._last_pressed = {}
        self._angular = 0
        self._linear_x = 0
        self._linear_y = 0
        self._linear_z = 0

    movement_bindings = {
        curses.KEY_UP:    ( 1,  0,  0,  0), #Up Linear X+
        curses.KEY_DOWN:  (-1,  0,  0,  0), #Down Linear X-
        119:              ( 0,  1,  0,  0), #W Linear Z+
        115:              ( 0, -1,  0,  0), #S Linear Z-
        97:               ( 0,  0,  1,  0), #A Linear Y+
        100:              ( 0,  0, -1,  0), #D Linear Y-
        curses.KEY_LEFT:  ( 0,  0,  0,  1), #Left Angular Z+
        curses.KEY_RIGHT: ( 0,  0,  0, -1), #Right Angular Z-
    }

    def run(self):
        rate = rospy.Rate(self._hz)
        self._running = True
        while self._running:
            while True:
                keycode = self._interface.read_key()
                if keycode is None:
                    break
                self._key_pressed(keycode)
            self._set_velocity()
            self._publish()
            rate.sleep()

    def _get_twist(self, linear_x, linear_y, linear_z, angular):
        twist = Twist()
        twist.linear.x = linear_x
        twist.linear.y = linear_y
        twist.linear.z = linear_z
        twist.angular.z = angular
        return twist

    def _set_velocity(self):
        now = rospy.get_time()
        keys = []
        for a in self._last_pressed:
            if now - self._last_pressed[a] < 0.4:
                keys.append(a)
        linear_x = 0.0
        linear_y = 0.0
        linear_z = 0.0
        angular = 0.0
        for k in keys:
            lx,lz,ly, a = self.movement_bindings[k]
            linear_x += lx
            linear_y += ly
            linear_z += lz
            angular += a

        if linear_x > 0:
            linear_x = linear_x * self._forward_rate
        else:
            linear_x = linear_x * self._backward_rate

        linear_y = linear_y * self._forward_rate

        linear_z = linear_z * self._forward_rate

        angular = angular * self._rotation_rate
        self._angular = angular
        self._linear_x = linear_x
        self._linear_y = linear_y
        self._linear_z = linear_z

    def _key_pressed(self, keycode):
        if keycode == ord('q'):
            self._running = False
            rospy.signal_shutdown('Bye')
        elif keycode == ord('t'):
            self._takeoff_cmd.publish(Empty())
        elif keycode == ord('l'):
            self._land_cmd.publish(Empty())
        elif keycode == ord('r'):
            self._reset_cmd.publish(Empty())
        elif keycode == ord('i'):
            subprocess.call(self._init_cmd,shell=True)
            self._flt_cmd.publish(Empty())
        elif keycode in self.movement_bindings:
            self._last_pressed[keycode] = rospy.get_time()

    def _publish(self):
        self._interface.clear()
        self._interface.write_line(1, 'Sphinx Key Controller')        
        self._interface.write_line(2, '----------------------------------------------------------------')        
        self._interface.write_line(3, 'Takeoff (T)                 | Linear X   (Up/Down)        {}'.format(self._linear_x))
        self._interface.write_line(4, 'Land (L)                    | Linear Y   (A/D)            {}'.format(self._linear_y))
        self._interface.write_line(5, 'Reset (R)                   | Linear Z   (W/S)            {}'.format(self._linear_z))
        self._interface.write_line(6, 'Initialize (I)              | Angular Z  (Left/Right)     {}'.format(self._angular))
        self._interface.write_line(7, '----------------------------------------------------------------')        
        self._interface.write_line(8, 'Q to quit')
        self._interface.write_line(9, 'Current Height {} :: Attitude {}'.format(height,attitude))
        self._interface.refresh()

        twist = self._get_twist(self._linear_x, self._linear_y, self._linear_z, self._angular)
        self._pub_cmd.publish(twist)


def main(stdscr):
    rospy.init_node('key_teleop')
    app = SimpleKeyTeleop(TextWindow(stdscr))
    rospy.Subscriber('/ground_truth_to_tf/pose',PoseStamped,data_callback)
    app.run()

if __name__ == '__main__':
    port_sphinx = 11345
    port_gazebo = 11346
    os.environ["GAZEBO_MASTER_URI"] = "http://localhost:{}".format(port_sphinx)
    try:
        curses.wrapper(main)
    except rospy.ROSInterruptException:
        pass
